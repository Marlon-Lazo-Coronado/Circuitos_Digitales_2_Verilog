module Mux_Conductual_2x1_2bits (
	output reg	[1:0] data_out,
	output reg	valid_out1,
	input 		clok,
	input		valid1,
	input		valid2,
	input 		reset_L,	
	input 		selector,
	input 		[1:0] data_in0,
	input 		[1:0] data_in1);
	
	
	
	
	
	
	

	always @ (posedge clok) begin           //<<   >>
		
		if (reset_L==0) 
			data_out <= 0;
			
			
		if (reset_L==1)
			if ((selector == 0) & (valid1==1))
				data_out <= data_in0;
			if ((selector == 1) & (valid2==1))
				data_out <= data_in1;
		
			


		if (selector == 0)
			valid_out1 <= valid1;
		else
			valid_out1 <= valid2;
		
	end








	
endmodule



















module probador6(
	output reg 		clok,
	output reg		valid1,
	output reg		valid2,
	output reg 		reset_L,	
	output reg		selector,
	output reg 		[1:0] data_in0,
	output reg 		[1:0] data_in1,
	input	[1:0] data_out,
	input	valid_out1,
	input	data_out_Estruc,
	input	valid_out1_Estruc);
	
	initial begin
		$dumpfile("Mux.vcd");
		$dumpvars;
		$display ("\t\t\tclok,\tvalid1,\tvalid2, \treset_L,\tselector,\tdata_in0,\tdata_in1,\tdata_out,\tvalid_out1");
		$monitor($time,"\t%b\t%b\t\t%b\t\t%b\t%b\t%b\t%b\t%b\t%b",clok,valid1,valid2,reset_L,selector,data_in0,data_in1,data_out,valid_out1);
		
		// Valores iniciales de las señales.           
		valid1 = 'b1;            
		valid2 = 'b1;
		selector = 'b0;
		reset_L = 'b0;
		data_in0 = 'b0;
		data_in1 = 'b0;
		
		#7 reset_L = 'b1 ;
		
		repeat (16) begin				
        		@(posedge clok);
        		
        		selector <= ~selector;
        			
        		data_in0 <= data_in0 +1;
        		data_in1 <= data_in1 -1;
        		
        		valid1 <= ~valid1;
        		valid2 <= ~valid2;
        		
    
        		
		end
		
		valid1 = 'b0;            
		valid2 = 'b0;
		selector = 'b0;
		reset_L = 'b0;
		data_in0 = 'b0;
		data_in1 = 'b0;
		$finish;
		
	end
	// Reloj
	initial	clok 	<= 0;			// Valor inicial al reloj, sino siempre será indeterminado
	always	#1 clok 	<= ~clok;		// Hace "toggle" cada 4 segundos
	
endmodule










module Mux_Conductual_4x1_4bits (
	output		[3:0] out3,
	output		valid_out3,
	input		clok,
	input		valid1,
	input		valid2,
	input		valid3,
	input		valid4,
	input 		reset_L,	
	//input 		selector,
	input 		[1:0] selector_2bits,
	input 		[3:0] bus1,
	input 		[3:0] bus2,
	input 		[3:0] bus3,
	input 		[3:0] bus4);
	
	
		
	always @ (*) begin
	
	if (selector_2bits == 'b0)
		Mux_Conductual_2x1_4bits intst(.out2(out3),.valid_out2(valid_out3),.clok(clok),.valid1(valid1),.valid2(valid1),.reset_L(reset_L),.selector(valid1),.bus1(bus1),.bus2(bus1));
		
		
		if ((selector_2bits[1] == 'b0) & (selector_2bits[0] == 'b1))
			Mux_Conductual_2x1_4bits wt(.out2(out3),.valid_out2(valid_out3),.clok(clok),.valid1(valid2),.valid2(valid2),.reset_L(reset_L),.selector(1),.bus1(bus2),.bus2(bus2));
	
	
		if ((selector_2bits[1] == 1) & (selector_2bits[0] == 0))
			Mux_Conductual_2x1_4bits dx(.out2(out3),.valid_out2(valid_out3),.clok(clok),.valid1(valid3),.valid2(valid3),.reset_L(reset_L),.selector(0),.bus1(bus3),.bus2(bus3));
	
	
		if ((selector_2bits[1] == 1) & (selector_2bits[0] == 1))
			Mux_Conductual_2x1_4bits dy(.out2(out3),.valid_out2(valid_out3),.clok(clok),.valid1(valid4),.valid2(valid4),.reset_L(reset_L),.selector(1),.bus1(bus4),.bus2(bus4));
	
	end	
		
endmodule


yosys -s script.ys
	sed -i 's/Mux_Conductual_2x1_2bits/Mux_Conductual_2x1_2bits_Estruc/g' Mux_Conductual_2x1_2bits_Estruc.v
	sed -i 's/data_out/data_out_Estruc/g' Mux_Conductual_2x1_2bits_Estruc.v
	sed -i 's/valid_out1/valid_out1_Estruc/g' Mux_Conductual_2x1_2bits_Estruc.v


yosys -s yosys_2x1_4b.ys
sed -i 's/Mux_Conductual_2x1_4bits/Mux_Conductual_2x1_4bits_Estruc/g' Mux_Conductual_2x1_4bits_Estruc.v
sed -i 's/out2/out2_Estruc/g' Mux_Conductual_2x1_4bits_Estruc.v
sed -i 's/valid_out2/valid_out2_Estruc/g' Mux_Conductual_2x1_4bits_Estruc.v


yosys -s script_4x1_4b.ys
sed -i 's/Mux_Conductual_4x1_4bits/Mux_Conductual_4x1_4bits_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v
sed -i 's/out3/out3_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v
sed -i 's/valid_out3/valid_out3_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v
	







	sed -n 'p' Mux_Conductual_2x1_4bits_Estruc.v > Mux_Conductual_2x1_4bits.v
	sed -i 's/Mux_Conductual_2x1_4bits/Mux_Conductual_2x1_4bits_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v
	sed -i 's/out2/out2_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v
	sed -i 's/valid_out2/valid_out2_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v	
	
	sed -n 'p' Mux_Conductual_2x1_2bits_Estruc.v > Mux_Conductual_2x1_2bits.v
	sed -i 's/Mux_Conductual_2x1_2bits/Mux_Conductual_2x1_2bits_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v
	sed -i 's/data_out/data_out_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v
	sed -i 's/valid_out1/valid_out1_Estruc/g' Mux_Conductual_4x1_4bits_Estruc.v






